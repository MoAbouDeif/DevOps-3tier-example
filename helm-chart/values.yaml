nameOverride: ""
fullnameOverride: ""
domainName: "example.local"

frontend:
  replicaCount: 2

  image:
    repository: nginx
    pullPolicy: IfNotPresent
    tag: ""

  imagePullSecrets: []

  serviceAccount:
    create: true
    automount: true
    annotations: {}
    name: ""

  podAnnotations: {}

  podLabels: {}

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: 
    capabilities:
      drop:
      - ALL
    readOnlyRootFilesystem: true
    runAsNonRoot: true
    runAsUser: 1000

  service:
    type: ClusterIP
    port: 80

  ingress:
    enabled: enable
    className: "alb"
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    hosts:
      - host: chart-example.local
        paths:
          - path: /
            pathType: ImplementationSpecific
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

  resources: 
    limits:
      cpu: 100m
      memory: 128Mi
    requests:
      cpu: 100m
      memory: 128Mi

  livenessProbe:
    httpGet:
      path: /healthz
      port: http
  readinessProbe:
    httpGet:
      path: /ready
      port: http

  autoscaling:
    enabled: true
    minReplicas: 2
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  volumes: []
  # - name: foo
  #   secret:
  #     secretName: mysecret
  #     optional: false
  volumeMounts: []
  # - name: foo
  #   mountPath: "/etc/foo"
  #   readOnly: true
  nodeSelector: {}
  tolerations: []
  affinity: {}

backend:
  replicaCount: 2

  image:
    repository: nginx
    pullPolicy: IfNotPresent
    tag: ""

  imagePullSecrets: []

  serviceAccount:
    create: true
    automount: true
    annotations: {}
    name: ""

  podAnnotations: {}

  podLabels: {}

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: 
    capabilities:
      drop:
      - ALL
    readOnlyRootFilesystem: true
    runAsNonRoot: true
    runAsUser: 1000

  service:
    type: ClusterIP
    port: 5000

  resources: 
    limits:
      cpu: 100m
      memory: 128Mi
    requests:
      cpu: 100m
      memory: 128Mi

  livenessProbe:
    httpGet:
      path: /healthz
      port: http
  readinessProbe:
    httpGet:
      path: /ready
      port: http

  autoscaling:
    enabled: true
    minReplicas: 2
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  volumes: []
  # - name: foo
  #   secret:
  #     secretName: mysecret
  #     optional: false
  volumeMounts: []
  # - name: foo
  #   mountPath: "/etc/foo"
  #   readOnly: true
  nodeSelector: {}
  tolerations: []
  affinity: {}

postgresql:
  auth:
    enablePostgresUser: true
    postgresPassword: "root-pass"
    ## @param auth.username Name for a custom user to create
    ##
    username: "test-user"
    password: "test-pass"
    database: "test-db"
    ## @param auth.replicationUsername Name of the replication user
    ##
    replicationUsername: repl_user
    replicationPassword: "repl_pass"
    ## @param auth.existingSecret Name of existing secret to use for PostgreSQL credentials. `auth.postgresPassword`, `auth.password`, and `auth.replicationPassword` will be ignored and picked up from this secret. The secret might also contains the key `ldap-password` if LDAP is enabled. `ldap.bind_password` will be ignored and picked from this secret in this case.
    ##
    existingSecret: "db-secret"
  
  primary:
    ## @param primary.name Name of the primary database (eg primary, master, leader, ...)
    ##
    name: primary
    ## @param primary.configuration PostgreSQL Primary main configuration to be injected as ConfigMap
    ## ref: https://www.postgresql.org/docs/current/static/runtime-config.html
    ##
    configuration: ""
    ## @param primary.pgHbaConfiguration PostgreSQL Primary client authentication configuration
    ## ref: https://www.postgresql.org/docs/current/static/auth-pg-hba-conf.html
    ## e.g:#
    ## pgHbaConfiguration: |-
    ##   local all all trust
    ##   host all all localhost trust
    ##   host mydatabase mysuser 192.168.0.0/24 md5
    ##
    pgHbaConfiguration: ""
    ## @param primary.existingConfigmap Name of an existing ConfigMap with PostgreSQL Primary configuration
    ## NOTE: `primary.configuration` and `primary.pgHbaConfiguration` will be ignored
    ##
    existingConfigmap: ""
    ## @param primary.extendedConfiguration Extended PostgreSQL Primary configuration (appended to main or default configuration)
    ## ref: https://github.com/bitnami/containers/tree/main/bitnami/postgresql#allow-settings-to-be-loaded-from-files-other-than-the-default-postgresqlconf
    ##
    extendedConfiguration: ""
    ## @param primary.existingExtendedConfigmap Name of an existing ConfigMap with PostgreSQL Primary extended configuration
    ## NOTE: `primary.extendedConfiguration` will be ignored
    ##
    existingExtendedConfigmap: ""
    ## Initdb configuration
    ## ref: https://github.com/bitnami/containers/tree/main/bitnami/postgresql#specifying-initdb-arguments
    ##
    initdb:
      ## @param primary.initdb.args PostgreSQL initdb extra arguments
      ##
      args: ""
      ## @param primary.initdb.postgresqlWalDir Specify a custom location for the PostgreSQL transaction log
      ##
      postgresqlWalDir: ""
      ## @param primary.initdb.scripts Dictionary of initdb scripts
      ## Specify dictionary of scripts to be run at first boot
      ## e.g:
      ## scripts:
      ##   my_init_script.sh: |
      ##      #!/bin/sh
      ##      echo "Do something."
      ##
      scripts: {}
      ## @param primary.initdb.scriptsConfigMap ConfigMap with scripts to be run at first boot
      ## NOTE: This will override `primary.initdb.scripts`
      ##
      scriptsConfigMap: ""
      ## @param primary.initdb.scriptsSecret Secret with scripts to be run at first boot (in case it contains sensitive information)
      ## NOTE: This can work along `primary.initdb.scripts` or `primary.initdb.scriptsConfigMap`
      ##
      scriptsSecret: ""
      ## @param primary.initdb.user Specify the PostgreSQL username to execute the initdb scripts
      ##
      user: ""
      ## @param primary.initdb.password Specify the PostgreSQL password to execute the initdb scripts
      ##
      password: ""
    ## Pre-init configuration
    ## ref: https://github.com/bitnami/containers/tree/main/bitnami/postgresql/#on-container-start
    preInitDb:
      ## @param primary.preInitDb.scripts Dictionary of pre-init scripts
      ## Specify dictionary of shell scripts to be run before db boot
      ## e.g:
      ## scripts:
      ##   my_pre_init_script.sh: |
      ##      #!/bin/sh
      ##      echo "Do something."
      scripts: {}
      ## @param primary.preInitDb.scriptsConfigMap ConfigMap with pre-init scripts to be run
      ## NOTE: This will override `primary.preInitDb.scripts`
      scriptsConfigMap: ""
      ## @param primary.preInitDb.scriptsSecret Secret with pre-init scripts to be run
      ## NOTE: This can work along `primary.preInitDb.scripts` or `primary.preInitDb.scriptsConfigMap`
      scriptsSecret: ""
    ## Configure current cluster's primary server to be the standby server in other cluster.
    ## This will allow cross cluster replication and provide cross cluster high availability.
    ## You will need to configure pgHbaConfiguration if you want to enable this feature with local cluster replication enabled.
    ## @param primary.standby.enabled Whether to enable current cluster's primary as standby server of another cluster or not
    ## @param primary.standby.primaryHost The Host of replication primary in the other cluster
    ## @param primary.standby.primaryPort The Port of replication primary in the other cluster
    ##
    standby:
      enabled: false
      primaryHost: ""
      primaryPort: ""
    ## @param primary.extraEnvVars Array with extra environment variables to add to PostgreSQL Primary nodes
    ## e.g:
    ## extraEnvVars:
    ##   - name: FOO
    ##     value: "bar"
    ##
    extraEnvVars: []
    ## @param primary.extraEnvVarsCM Name of existing ConfigMap containing extra env vars for PostgreSQL Primary nodes
    ##
    extraEnvVarsCM: ""
    ## @param primary.extraEnvVarsSecret Name of existing Secret containing extra env vars for PostgreSQL Primary nodes
    ##
    extraEnvVarsSecret: ""
    ## @param primary.command Override default container command (useful when using custom images)
    ##
    command: []
    ## @param primary.args Override default container args (useful when using custom images)
    ##
    args: []
    ## Configure extra options for PostgreSQL Primary containers' liveness, readiness and startup probes
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#configure-probes
    ## @param primary.livenessProbe.enabled Enable livenessProbe on PostgreSQL Primary containers
    ## @param primary.livenessProbe.initialDelaySeconds Initial delay seconds for livenessProbe
    ## @param primary.livenessProbe.periodSeconds Period seconds for livenessProbe
    ## @param primary.livenessProbe.timeoutSeconds Timeout seconds for livenessProbe
    ## @param primary.livenessProbe.failureThreshold Failure threshold for livenessProbe
    ## @param primary.livenessProbe.successThreshold Success threshold for livenessProbe
    ##
    livenessProbe:
      enabled: true
      initialDelaySeconds: 30
      periodSeconds: 10
      timeoutSeconds: 5
      failureThreshold: 6
      successThreshold: 1
    ## @param primary.readinessProbe.enabled Enable readinessProbe on PostgreSQL Primary containers
    ## @param primary.readinessProbe.initialDelaySeconds Initial delay seconds for readinessProbe
    ## @param primary.readinessProbe.periodSeconds Period seconds for readinessProbe
    ## @param primary.readinessProbe.timeoutSeconds Timeout seconds for readinessProbe
    ## @param primary.readinessProbe.failureThreshold Failure threshold for readinessProbe
    ## @param primary.readinessProbe.successThreshold Success threshold for readinessProbe
    ##
    readinessProbe:
      enabled: true
      initialDelaySeconds: 5
      periodSeconds: 10
      timeoutSeconds: 5
      failureThreshold: 6
      successThreshold: 1
    ## @param primary.startupProbe.enabled Enable startupProbe on PostgreSQL Primary containers
    ## @param primary.startupProbe.initialDelaySeconds Initial delay seconds for startupProbe
    ## @param primary.startupProbe.periodSeconds Period seconds for startupProbe
    ## @param primary.startupProbe.timeoutSeconds Timeout seconds for startupProbe
    ## @param primary.startupProbe.failureThreshold Failure threshold for startupProbe
    ## @param primary.startupProbe.successThreshold Success threshold for startupProbe
    ##
    startupProbe:
      enabled: false
      initialDelaySeconds: 30
      periodSeconds: 10
      timeoutSeconds: 1
      failureThreshold: 15
      successThreshold: 1
    ## @param primary.customLivenessProbe Custom livenessProbe that overrides the default one
    ##
    customLivenessProbe: {}
    ## @param primary.customReadinessProbe Custom readinessProbe that overrides the default one
    ##
    customReadinessProbe: {}
    ## @param primary.customStartupProbe Custom startupProbe that overrides the default one
    ##
    customStartupProbe: {}
    ## @param primary.lifecycleHooks for the PostgreSQL Primary container to automate configuration before or after startup
    ##
    lifecycleHooks: {}
    ## PostgreSQL Primary resource requests and limits
    ## ref: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
    ## @param primary.resourcesPreset Set container resources according to one common preset (allowed values: none, nano, micro, small, medium, large, xlarge, 2xlarge). This is ignored if primary.resources is set (primary.resources is recommended for production).
    ## More information: https://github.com/bitnami/charts/blob/main/bitnami/common/templates/_resources.tpl#L15
    ##
    resourcesPreset: "nano"
    ## @param primary.resources Set container requests and limits for different resources like CPU or memory (essential for production workloads)
    ## Example:
    ## resources:
    ##   requests:
    ##     cpu: 2
    ##     memory: 512Mi
    ##   limits:
    ##     cpu: 3
    ##     memory: 1024Mi
    ##
    resources: {}
    ## Pod Security Context
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
    ## @param primary.podSecurityContext.enabled Enable security context
    ## @param primary.podSecurityContext.fsGroupChangePolicy Set filesystem group change policy
    ## @param primary.podSecurityContext.sysctls Set kernel settings using the sysctl interface
    ## @param primary.podSecurityContext.supplementalGroups Set filesystem extra groups
    ## @param primary.podSecurityContext.fsGroup Group ID for the pod
    ##
    podSecurityContext:
      enabled: true
      fsGroupChangePolicy: Always
      sysctls: []
      supplementalGroups: []
      fsGroup: 1001
    ## Container Security Context
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
    ## @param primary.containerSecurityContext.enabled Enabled containers' Security Context
    ## @param primary.containerSecurityContext.seLinuxOptions [object,nullable] Set SELinux options in container
    ## @param primary.containerSecurityContext.runAsUser Set containers' Security Context runAsUser
    ## @param primary.containerSecurityContext.runAsGroup Set containers' Security Context runAsGroup
    ## @param primary.containerSecurityContext.runAsNonRoot Set container's Security Context runAsNonRoot
    ## @param primary.containerSecurityContext.privileged Set container's Security Context privileged
    ## @param primary.containerSecurityContext.readOnlyRootFilesystem Set container's Security Context readOnlyRootFilesystem
    ## @param primary.containerSecurityContext.allowPrivilegeEscalation Set container's Security Context allowPrivilegeEscalation
    ## @param primary.containerSecurityContext.capabilities.drop List of capabilities to be dropped
    ## @param primary.containerSecurityContext.seccompProfile.type Set container's Security Context seccomp profile
    ##
    containerSecurityContext:
      enabled: true
      seLinuxOptions: {}
      runAsUser: 1001
      runAsGroup: 1001
      runAsNonRoot: true
      privileged: false
      readOnlyRootFilesystem: true
      allowPrivilegeEscalation: false
      capabilities:
        drop: ["ALL"]
      seccompProfile:
        type: "RuntimeDefault"
    ## @param primary.automountServiceAccountToken Mount Service Account token in pod
    ##
    automountServiceAccountToken: false
    ## @param primary.hostAliases PostgreSQL primary pods host aliases
    ## https://kubernetes.io/docs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/
    ##
    hostAliases: []
    ## @param primary.hostNetwork Specify if host network should be enabled for PostgreSQL pod (postgresql primary)
    ##
    hostNetwork: false
    ## @param primary.hostIPC Specify if host IPC should be enabled for PostgreSQL pod (postgresql primary)
    ##
    hostIPC: false
    ## @param primary.labels Map of labels to add to the statefulset (postgresql primary)
    ##
    labels: {}
    ## @param primary.annotations Annotations for PostgreSQL primary pods
    ##
    annotations: {}
    ## @param primary.podLabels Map of labels to add to the pods (postgresql primary)
    ##
    podLabels: {}
    ## @param primary.podAnnotations Map of annotations to add to the pods (postgresql primary)
    ##
    podAnnotations: {}
    ## @param primary.podAffinityPreset PostgreSQL primary pod affinity preset. Ignored if `primary.affinity` is set. Allowed values: `soft` or `hard`
    ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
    ##
    podAffinityPreset: ""
    ## @param primary.podAntiAffinityPreset PostgreSQL primary pod anti-affinity preset. Ignored if `primary.affinity` is set. Allowed values: `soft` or `hard`
    ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
    ##
    podAntiAffinityPreset: soft
    ## PostgreSQL Primary node affinity preset
    ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#node-affinity
    ##
    nodeAffinityPreset:
      ## @param primary.nodeAffinityPreset.type PostgreSQL primary node affinity preset type. Ignored if `primary.affinity` is set. Allowed values: `soft` or `hard`
      ##
      type: ""
      ## @param primary.nodeAffinityPreset.key PostgreSQL primary node label key to match Ignored if `primary.affinity` is set.
      ## E.g.
      ## key: "kubernetes.io/e2e-az-name"
      ##
      key: ""
      ## @param primary.nodeAffinityPreset.values PostgreSQL primary node label values to match. Ignored if `primary.affinity` is set.
      ## E.g.
      ## values:
      ##   - e2e-az1
      ##   - e2e-az2
      ##
      values: []
    ## @param primary.affinity Affinity for PostgreSQL primary pods assignment
    ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
    ## Note: primary.podAffinityPreset, primary.podAntiAffinityPreset, and primary.nodeAffinityPreset will be ignored when it's set
    ##
    affinity: {}
    ## @param primary.nodeSelector Node labels for PostgreSQL primary pods assignment
    ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/
    ##
    nodeSelector: {}
    ## @param primary.tolerations Tolerations for PostgreSQL primary pods assignment
    ## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
    ##
    tolerations: []
    ## @param primary.topologySpreadConstraints Topology Spread Constraints for pod assignment spread across your cluster among failure-domains. Evaluated as a template
    ## Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/#spread-constraints-for-pods
    ##
    topologySpreadConstraints: []
    ## @param primary.priorityClassName Priority Class to use for each pod (postgresql primary)
    ##
    priorityClassName: ""
    ## @param primary.schedulerName Use an alternate scheduler, e.g. "stork".
    ## ref: https://kubernetes.io/docs/tasks/administer-cluster/configure-multiple-schedulers/
    ##
    schedulerName: ""
    ## @param primary.terminationGracePeriodSeconds Seconds PostgreSQL primary pod needs to terminate gracefully
    ## ref: https://kubernetes.io/docs/concepts/workloads/pods/pod/#termination-of-pods
    ##
    terminationGracePeriodSeconds: ""
    ## @param primary.updateStrategy.type PostgreSQL Primary statefulset strategy type
    ## @param primary.updateStrategy.rollingUpdate PostgreSQL Primary statefulset rolling update configuration parameters
    ## ref: https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#update-strategies
    ##
    updateStrategy:
      type: RollingUpdate
      rollingUpdate: {}
    ## @param primary.extraVolumeMounts Optionally specify extra list of additional volumeMounts for the PostgreSQL Primary container(s)
    ##
    extraVolumeMounts: []
    ## @param primary.extraVolumes Optionally specify extra list of additional volumes for the PostgreSQL Primary pod(s)
    ##
    extraVolumes: []
    ## @param primary.sidecars Add additional sidecar containers to the PostgreSQL Primary pod(s)
    ## For example:
    ## sidecars:
    ##   - name: your-image-name
    ##     image: your-image
    ##     imagePullPolicy: Always
    ##     ports:
    ##       - name: portname
    ##         containerPort: 1234
    ##
    sidecars: []
    ## @param primary.initContainers Add additional init containers to the PostgreSQL Primary pod(s)
    ## Example
    ##
    ## initContainers:
    ##   - name: do-something
    ##     image: busybox
    ##     command: ['do', 'something']
    ##
    initContainers: []
    ## Pod Disruption Budget configuration
    ## ref: https://kubernetes.io/docs/tasks/run-application/configure-pdb
    ## @param primary.pdb.create Enable/disable a Pod Disruption Budget creation
    ## @param primary.pdb.minAvailable Minimum number/percentage of pods that should remain scheduled
    ## @param primary.pdb.maxUnavailable Maximum number/percentage of pods that may be made unavailable. Defaults to `1` if both `primary.pdb.minAvailable` and `primary.pdb.maxUnavailable` are empty.
    ##
    pdb:
      create: true
      minAvailable: ""
      maxUnavailable: ""
    ## @param primary.extraPodSpec Optionally specify extra PodSpec for the PostgreSQL Primary pod(s)
    ##
    extraPodSpec: {}
    ## Network Policies
    ## Ref: https://kubernetes.io/docs/concepts/services-networking/network-policies/
    ##
    networkPolicy:
      ## @param primary.networkPolicy.enabled Specifies whether a NetworkPolicy should be created
      ##
      enabled: true
      ## @param primary.networkPolicy.allowExternal Don't require server label for connections
      ## The Policy model to apply. When set to false, only pods with the correct
      ## server label will have network access to the ports server is listening
      ## on. When true, server will accept connections from any source
      ## (with the correct destination port).
      ##
      allowExternal: true
      ## @param primary.networkPolicy.allowExternalEgress Allow the pod to access any range of port and all destinations.
      ##
      allowExternalEgress: true
      ## @param primary.networkPolicy.extraIngress [array] Add extra ingress rules to the NetworkPolicy
      ## e.g:
      ## extraIngress:
      ##   - ports:
      ##       - port: 1234
      ##     from:
      ##       - podSelector:
      ##           - matchLabels:
      ##               - role: frontend
      ##       - podSelector:
      ##           - matchExpressions:
      ##               - key: role
      ##                 operator: In
      ##                 values:
      ##                   - frontend
      extraIngress: []
      ## @param primary.networkPolicy.extraEgress [array] Add extra ingress rules to the NetworkPolicy
      ## e.g:
      ## extraEgress:
      ##   - ports:
      ##       - port: 1234
      ##     to:
      ##       - podSelector:
      ##           - matchLabels:
      ##               - role: frontend
      ##       - podSelector:
      ##           - matchExpressions:
      ##               - key: role
      ##                 operator: In
      ##                 values:
      ##                   - frontend
      ##
      extraEgress: []
      ## @param primary.networkPolicy.ingressNSMatchLabels [object] Labels to match to allow traffic from other namespaces
      ## @param primary.networkPolicy.ingressNSPodMatchLabels [object] Pod labels to match to allow traffic from other namespaces
      ##
      ingressNSMatchLabels: {}
      ingressNSPodMatchLabels: {}
    ## PostgreSQL Primary service configuration
    ##
    service:
      ## @param primary.service.type Kubernetes Service type
      ##
      type: ClusterIP
      ## @param primary.service.ports.postgresql PostgreSQL service port
      ##
      ports:
        postgresql: 5432
      ## Node ports to expose
      ## NOTE: choose port between <30000-32767>
      ## @param primary.service.nodePorts.postgresql Node port for PostgreSQL
      ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
      ##
      nodePorts:
        postgresql: ""
      ## @param primary.service.clusterIP Static clusterIP or None for headless services
      ## e.g:
      ## clusterIP: None
      ##
      clusterIP: ""
      ## @param primary.service.labels Map of labels to add to the primary service
      ##
      labels: {}
      ## @param primary.service.annotations Annotations for PostgreSQL primary service
      ##
      annotations: {}
      ## @param primary.service.loadBalancerClass Load balancer class if service type is `LoadBalancer`
      ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#load-balancer-class
      ##
      loadBalancerClass: ""
      ## @param primary.service.loadBalancerIP Load balancer IP if service type is `LoadBalancer`
      ## Set the LoadBalancer service type to internal only
      ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#internal-load-balancer
      ##
      loadBalancerIP: ""
      ## @param primary.service.externalTrafficPolicy Enable client source IP preservation
      ## ref https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/#preserving-the-client-source-ip
      ##
      externalTrafficPolicy: Cluster
      ## @param primary.service.loadBalancerSourceRanges Addresses that are allowed when service is LoadBalancer
      ## https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/#restrict-access-for-loadbalancer-service
      ##
      ## loadBalancerSourceRanges:
      ## - 10.10.10.0/24
      ##
      loadBalancerSourceRanges: []
      ## @param primary.service.extraPorts Extra ports to expose in the PostgreSQL primary service
      ##
      extraPorts: []
      ## @param primary.service.sessionAffinity Session Affinity for Kubernetes service, can be "None" or "ClientIP"
      ## If "ClientIP", consecutive client requests will be directed to the same Pod
      ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
      ##
      sessionAffinity: None
      ## @param primary.service.sessionAffinityConfig Additional settings for the sessionAffinity
      ## sessionAffinityConfig:
      ##   clientIP:
      ##     timeoutSeconds: 300
      ##
      sessionAffinityConfig: {}
      ## Headless service properties
      ##
      headless:
        ## @param primary.service.headless.annotations Additional custom annotations for headless PostgreSQL primary service
        ##
        annotations: {}
    ## PostgreSQL Primary persistence configuration
    ##
    persistence:
      ## @param primary.persistence.enabled Enable PostgreSQL Primary data persistence using PVC
      ##
      enabled: true
      ## @param primary.persistence.volumeName Name to assign the volume
      ##
      volumeName: "data"
      ## @param primary.persistence.existingClaim Name of an existing PVC to use
      ##
      existingClaim: ""
      ## @param primary.persistence.mountPath The path the volume will be mounted at
      ## Note: useful when using custom PostgreSQL images
      ##
      mountPath: /bitnami/postgresql
      ## @param primary.persistence.subPath The subdirectory of the volume to mount to
      ## Useful in dev environments and one PV for multiple services
      ##
      subPath: ""
      ## @param primary.persistence.storageClass PVC Storage Class for PostgreSQL Primary data volume
      ## If defined, storageClassName: <storageClass>
      ## If set to "-", storageClassName: "", which disables dynamic provisioning
      ## If undefined (the default) or set to null, no storageClassName spec is
      ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
      ##   GKE, AWS & OpenStack)
      ##
      storageClass: ""
      ## @param primary.persistence.accessModes PVC Access Mode for PostgreSQL volume
      ##
      accessModes:
        - ReadWriteOnce
      ## @param primary.persistence.size PVC Storage Request for PostgreSQL volume
      ##
      size: 8Gi
      ## @param primary.persistence.annotations Annotations for the PVC
      ##
      annotations: {}
      ## @param primary.persistence.labels Labels for the PVC
      ##
      labels: {}
      ## @param primary.persistence.selector Selector to match an existing Persistent Volume (this value is evaluated as a template)
      ## selector:
      ##   matchLabels:
      ##     app: my-app
      ##
      selector: {}
      ## @param primary.persistence.dataSource Custom PVC data source
      ##
      dataSource: {}
    ## PostgreSQL Primary Persistent Volume Claim Retention Policy
    ## ref: https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#persistentvolumeclaim-retention
    ##
    persistentVolumeClaimRetentionPolicy:
      ## @param primary.persistentVolumeClaimRetentionPolicy.enabled Enable Persistent volume retention policy for Primary Statefulset
      ##
      enabled: false
      ## @param primary.persistentVolumeClaimRetentionPolicy.whenScaled Volume retention behavior when the replica count of the StatefulSet is reduced
      ##
      whenScaled: Retain
      ## @param primary.persistentVolumeClaimRetentionPolicy.whenDeleted Volume retention behavior that applies when the StatefulSet is deleted
      ##
      whenDeleted: Retain